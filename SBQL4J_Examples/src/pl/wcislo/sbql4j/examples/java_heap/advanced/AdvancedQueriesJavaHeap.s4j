package pl.wcislo.sbql4j.examples.java_heap.advanced;

import java.util.List;
import java.util.Collection;

import pl.wcislo.sbql4j.examples.*;
import pl.wcislo.sbql4j.examples.model.advanced.*;

import pl.wcislo.sbql4j.java.model.runtime.Struct;

/**
 * Some advanced queries which are difficult (or even impossible) to write in LINQ.
 * Queries were orginally written by <a href="http://www.ipipan.waw.pl/~subieta/">Kazimierz Subieta</a>
 * for ODRA system. <a href="http://www.sbql.pl/various/SBQL_Examples_4_LINQ.cli.htm">link</a>
 */
public class AdvancedQueriesJavaHeap implements IAdvancedQueries {
	
	public static void main(String[] args) {
		new AdvancedQueriesJavaHeap();
	}
	
	public AdvancedQueriesJavaHeap() {
//		query1();
//		query2();
//		query3();
//		query4();
//		query5();
//		query6();
//		query7();
//		query8();
//		query9();
//		query10();
//		query11();
//		query12();
	}
	
	/**
	 * Get departments together with the average salaries of their employees
	 */
	@Override
	public Collection<Struct> query1() {
		List<Department> depts = data.getDepts();
		List<Struct> deptAvgSal = #{
			depts join avg(employs.salary)
		};
		return deptAvgSal;
//		Integer i = #{ 3 + 2 / 6};
//		System.out.println("1. Departments together with the average salaries of their employees: ");
//		for(Struct s : deptAvgSal) {
//			Department dept = (Department)s.getValue(0);
//			Double avgSal = (Double)s.getValue(1);
//			System.out.println("Department "+dept.getName()+" has average salary: "+avgSal);
//		}
//		System.out.println();
	}
	
	/**
	 * Get name, salary and department name for employees earning less than 2222
	 */
	@Override
	public Collection<Struct> query2() {
		List<Employee> emp = data.getEmps();
		List<Struct> poorEmpData = #{
			(emp where salary < 2222).(name, salary, worksIn.name)
		};
//		System.out.println("2. Name, salary and department name for employees earning less than 2222: ");
//		for(Struct poorEmp : poorEmpData) {
//			System.out.println(poorEmp);
//		}
//		System.out.println();
		return poorEmpData;
	}
	
	/**
	 * Get names of employees working for the department managed by Bert.
	 */
	@Override
	public Collection<String> query3() {
		List<Employee> emp = data.getEmps();
		List<String> bertSubordinates = #{
			(emp where worksIn.boss.name == "Bert").name
		};
		return bertSubordinates;
//		System.out.println("3. Names of employees working for the department managed by Bert:");
//		for(String ename : bertSubordinates) {
//			System.out.println(ename);
//		}
//		System.out.println();
	}
	
	/**
	 * Get the name of Poe's boss:
	 */
	@Override
	public String query4() {
		List<Employee> emp = data.getEmps();
		String poeBossName = #{
			(emp where name == "Poe")[0].worksIn.boss.name	
		};
//		System.out.println("4. Name of Poe's boss: "+poeBossName);
//		System.out.println();
		return poeBossName;
	}
	
	/**
	 * Names and cities of employees working in departments managed by Bert
	 */
	@Override
	public Collection<Struct> query5() {
		List<Department> dept = data.getDepts();
		List<Struct> res = #{
			(dept where boss.name == "Bert").
			employs.
			(name, (exists(address) ? address.city : "No address") )
		};
		return res;
//		System.out.println("5. Names and cities of employees working in departments managed by Bert: ");
//		for(Struct s : res) {
//			System.out.println(s);
//		}
//		System.out.println();
	}
	
	/**
	 * Get the minimal, average and maximal number of employees in departments
	 */
	@Override
	public Struct query6() {
		List<Department> dept = data.getDepts();
		Struct res = #{
			min(dept.count(employs)) as minimum, 
			avg(dept.count(employs)) as average, 
			max(dept.count(employs)) as maximum
		};
		return res;
//		System.out.println("6. Minimal, average and maximal number of employees in departments: ");
//		System.out.println(res);
//		res = #{
//			(dept.count(employs) group as counts).
//			(min(counts) as minimum, avg(counts) as average, max(counts) as maximum)
//		};
//		System.out.println(res);
//		System.out.println();
	}
	
	/**
	 * For each department get its name and the sum of salaries of employees being not bosses
	 */
	@Override
	public Collection<Struct> query7() {
		List<Department> dept = data.getDepts();
		List<Struct> res = #{
			((dept as d) join ((sum(d.employs.salary) - (d.boss.salary)) as s)).(d.name, s)
		};
		return res;
//		System.out.println("7. For each department get its name and the sum of salaries of employees being not bosses: ");
//		for(Struct s : res) {
//			System.out.println(s);
//		}
//		System.out.println();
	}
	
	/**
	 * Is it true that each department employs an employee earning the same as his/her boss?
	 */
	@Override
	public Boolean query8() {
		List<Department> dept = data.getDepts();
		Boolean res = #{
			all (dept as d)
			any ((d.employs minus d.boss) as e)
			(e.salary == d.boss.salary)
		};
		return res;
//		System.out.println("8. Is it true that each department employs an employee earning the same as his/her boss: "+res);
//		System.out.println();
	}
	
	/**
	 * For each employee get the message containing his/her name and
   	 * the percent of the annual budget of his/her department that is
	 * consumed by his/her monthly salary
	 */
	public Collection<String> query9() {
		List<Employee> emp = data.getEmps();
		List<String> res = #{
			emp.("Employee " + name + " consumes " + (salary * 12 * 100 / (worksIn.budget)) +
					"% of the " + worksIn.name + " department budget.")
		};
		return res;
//		System.out.println("9. For each employee get the message containing his/her name and");
//		System.out.println("the percent of the annual budget of his/her department that is");
//		System.out.println("consumed by his/her monthly salary: ");
//		for(String s : res) {
//			System.out.println(s);
//		}
//		System.out.println();
	}
	
	/**
	 * Get cities hosting all departments
	 */
	public Collection<String> query10() {
		List<Department> dept = data.getDepts();
		List<String> res = #{
			(unique(dept.location)) as deptcity 
			 where all(dept)(deptcity in location)
		};
		return res;
//		System.out.println("10. Get cities hosting all departments:");
//		for(String s : res) {
//			System.out.println(s);
//		}
//		System.out.println();
	}
	
	/**
	 * For each interval <n,n+999>, n = 0, 1000, 2000, 3000, ... get the message
	 * (string) containing the number of employees having the salary within this interval
     * and the interval itself.
	 * Output messages should have proper grammatical forms (suffixes -s for nouns (n) and verbs (v)).
	 */
	@Override
	public Collection<String> query11() {
		List<Employee> emp = data.getEmps();
		List<String> res = #{
			((0 as i close by (i+1000 where i <= max(emp.salary)) as i)
			join (count(emp where salary >= i and salary < i+1000) as c)
			join (c==1 ? ("" as n, "s" as v) : ("s" as n, "" as v)) ).
			(c + " employee" + n + " earn"+ v +" between "+ i +" and " + (i+999)) as message
		};
		return res;
//		System.out.println("11. For each interval <n,n+999>, n = 0, 1000, 2000, 3000, ... get the message");
//		System.out.println("(string) containing the number of employees having the salary within this interval");
//		System.out.println("and the interval itself.");
//		System.out.println("Output messages should have proper grammatical forms (suffixes -s for nouns (n) and verbs (v)).");
//		for(String s : res) {
//			System.out.println(s);
//		}
//		System.out.println();
	}
	
	/**
	 * For each location give the set of department names that are located at it and
	 * the average salary of bosses of these departments, providing that
	 * the number of clerks that are employed at such a location is lower than 100.
	 */
	@Override
	public Collection<Struct> query12() {
		List<Department> dept = data.getDepts();
		List<Employee> emp = data.getEmps();
		List<Struct> res = #{
			((unique(dept.location)) as deptcity).
			((((dept where deptcity in location) group as citydepts)
			where count(citydepts.employs.(emp where job == "clerk")) < 100).
			(deptcity as cityLocation,
					(citydepts.name) group as cityDeptNames,
					avg(citydepts.boss.salary) as cityDeptBossAvgSal))
		};
		return res;
//		System.out.println("12. For each location give the set of department names that are located at it and");
//		System.out.println("the average salary of bosses of these departments, providing that");
//		System.out.println("the number of clerks that are employed at such a location is lower than 100: ");
//		for(Struct s : res) {
//			System.out.println(s);
//		}
//		System.out.println();
	}
	
	
	private AdvQueriesData data;
	public AdvQueriesData getData() {
		if(data == null) {
			data = new AdvQueriesData();
		}
		return data;
	}
	
	@Override
    public void prepare() {
    	getData();
    }
    
	@Override
    public void shutDown() {
    	
    }
}