/* The following code was generated by JFlex 1.4.3 on 18.01.15 11:19 */

package parser;
  
import java_cup.runtime.Symbol;

import static parser.Symbols.*;
 



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18.01.15 11:19 from the specification file
 * <tt>C:/Users/user/git2/s12370_s12181_pr3/res/lexer.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\17\1\0\1\20\1\16\22\0\1\76\1\27\1\15"+
    "\2\0\1\25\1\57\1\0\1\106\1\107\1\23\1\21\1\32\1\22"+
    "\1\14\1\24\12\1\2\0\1\31\1\26\1\30\2\0\1\54\1\104"+
    "\1\64\1\55\1\41\1\13\1\67\1\40\1\33\1\77\1\13\1\101"+
    "\1\61\1\34\1\51\1\74\1\72\1\42\1\46\1\47\1\62\1\66"+
    "\1\37\1\45\1\102\1\13\3\0\1\60\1\12\1\0\1\7\1\105"+
    "\1\65\1\56\1\5\1\6\1\71\1\43\1\36\1\100\1\13\1\10"+
    "\1\63\1\35\1\52\1\75\1\73\1\3\1\11\1\2\1\4\1\70"+
    "\1\44\1\50\1\103\1\13\1\0\1\53\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\7\2\1\3\1\0\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\14\2\1\0\1\2\2\0\13\2\1\16\1\17\1\0"+
    "\5\2\1\20\4\2\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\11\2\2\27\3\2\1\30\1\31\16\2\1\32"+
    "\4\2\1\33\1\30\1\34\1\35\1\2\1\36\2\2"+
    "\1\12\3\2\1\31\1\2\1\37\2\40\10\2\1\41"+
    "\1\42\23\2\1\43\1\44\5\2\1\45\2\2\1\46"+
    "\1\2\1\47\3\2\1\50\1\51\1\52\3\2\1\0"+
    "\1\2\2\0\2\2\1\53\2\0\2\2\1\53\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0288\0\u0288\0\u0288\0\u0288"+
    "\0\u0288\0\u0288\0\u0360\0\u03a8\0\u03f0\0\u0438\0\u0288\0\u0480"+
    "\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0"+
    "\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\u0900"+
    "\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40"+
    "\0\u0b88\0\u0bd0\0\u0288\0\u0288\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0"+
    "\0\u0d38\0\u0d80\0\330\0\u0dc8\0\u0e10\0\u0e58\0\u0ea0\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\330"+
    "\0\u0288\0\u1200\0\u1248\0\u1290\0\u0288\0\u0288\0\u12d8\0\u1320"+
    "\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560"+
    "\0\u15a8\0\u15f0\0\u1638\0\u1680\0\u0c18\0\u16c8\0\u1710\0\u1758"+
    "\0\u17a0\0\330\0\330\0\330\0\330\0\u17e8\0\330\0\u1830"+
    "\0\u1878\0\330\0\u18c0\0\u1908\0\u1950\0\330\0\u1998\0\330"+
    "\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
    "\0\u1c20\0\u1c68\0\330\0\330\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88"+
    "\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8"+
    "\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\330"+
    "\0\330\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\330\0\u2370"+
    "\0\u23b8\0\330\0\u2400\0\330\0\u2448\0\u2490\0\u24d8\0\330"+
    "\0\330\0\330\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688"+
    "\0\u26d0\0\u2718\0\u2760\0\330\0\u27a8\0\u27f0\0\u2838\0\u2880"+
    "\0\u0288\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\4\1\11\2\4\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\4\1\35"+
    "\2\4\1\36\1\37\1\40\1\4\1\41\1\42\1\43"+
    "\1\44\1\45\2\4\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\4\1\55\1\4\1\56\4\4\1\15"+
    "\1\57\1\60\3\4\1\61\1\62\1\63\1\64\1\0"+
    "\1\2\12\0\1\65\74\0\2\4\1\66\6\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\2\4\1\67\15\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\15\4\1\70\2\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\6\4\1\71\2\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\7\4\1\72\1\73\1\0\1\4\17\0\2\4\1\74"+
    "\15\4\1\0\3\4\2\0\7\4\1\75\5\4\1\0"+
    "\7\4\3\0\1\4\1\76\1\4\1\77\5\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\112\0\15\13\1\100\72\13\17\0\1\15\116\0"+
    "\1\101\107\0\1\102\107\0\1\103\107\0\1\104\62\0"+
    "\11\4\1\0\1\4\17\0\1\4\1\105\1\106\15\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\16\4\1\107\1\110\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\17\4\1\110\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\2\4\1\106"+
    "\15\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\5\4\1\111\2\4\1\112"+
    "\7\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\12\4\1\113\2\4\1\70"+
    "\2\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\10\4\1\112\7\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\16\4\1\114\1\115\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\1\4\1\76\1\4\1\77"+
    "\5\4\1\0\1\4\17\0\14\4\1\116\3\4\1\0"+
    "\3\4\2\0\1\4\1\117\13\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\17\4\1\115\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\2\4\1\120\6\4"+
    "\1\0\1\4\17\0\7\4\1\120\10\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\2\4\1\120\6\4"+
    "\1\0\1\4\17\0\20\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\55\0\1\121\35\0\7\4\1\72\1\73"+
    "\1\0\1\4\17\0\1\4\1\122\1\74\10\4\1\73"+
    "\4\4\1\0\3\4\2\0\5\4\1\123\1\4\1\75"+
    "\5\4\1\0\2\4\1\124\4\4\61\0\1\125\110\0"+
    "\1\126\30\0\6\4\1\127\2\4\1\0\1\4\17\0"+
    "\1\130\2\4\1\131\14\4\1\0\1\132\2\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\1\4\1\133\1\67\15\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\6\4\1\127\2\4\1\0\1\4"+
    "\17\0\3\4\1\131\14\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\11\4\1\0\1\4\17\0\16\4"+
    "\1\134\1\135\1\0\3\4\2\0\15\4\1\0\7\4"+
    "\3\0\11\4\1\0\1\4\17\0\17\4\1\135\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\2\4\1\136"+
    "\6\4\1\0\1\4\17\0\7\4\1\137\10\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\2\4\1\140"+
    "\6\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\16\4\1\141\1\142\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\17\4\1\142"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\6\4"+
    "\1\143\2\4\1\0\1\4\17\0\20\4\1\0\1\144"+
    "\2\4\2\0\15\4\1\0\7\4\3\0\6\4\1\143"+
    "\2\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\1\145\107\0\3\4\1\146"+
    "\5\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\3\4\1\147\14\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\3\4\1\150"+
    "\14\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\7\4\1\151\1\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\7\4\1\152"+
    "\1\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\20\4\1\0\2\4\1\153\2\0\15\4\1\0\4\4"+
    "\1\154\2\4\3\0\11\4\1\0\1\4\17\0\20\4"+
    "\1\0\3\4\2\0\10\4\1\155\4\4\1\0\7\4"+
    "\3\0\2\4\1\156\6\4\1\0\1\4\17\0\20\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\20\4\1\0\3\4\2\0\2\4"+
    "\1\157\12\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\14\4\1\160\3\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\1\4\1\161\7\4\1\0\1\4"+
    "\17\0\20\4\1\0\3\4\2\0\15\4\1\0\7\4"+
    "\3\0\11\4\1\0\1\4\17\0\14\4\1\162\3\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\1\4"+
    "\1\162\7\4\1\0\1\4\17\0\20\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\6\4\1\163\11\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\4\4\1\164\4\4\1\0\1\4"+
    "\17\0\20\4\1\0\3\4\2\0\15\4\1\0\7\4"+
    "\3\0\11\4\1\0\1\4\17\0\1\165\17\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\7\4\1\166\10\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\2\4\1\166\6\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\7\4\1\167"+
    "\10\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\1\157\14\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\20\4\1\0\1\4\1\153\1\4\2\0\15\4"+
    "\1\0\3\4\1\154\3\4\3\0\11\4\1\0\1\4"+
    "\17\0\20\4\1\0\3\4\2\0\6\4\1\155\6\4"+
    "\1\0\7\4\3\0\11\4\1\0\1\4\17\0\20\4"+
    "\1\0\3\4\2\0\15\4\1\0\2\4\1\152\4\4"+
    "\3\0\11\4\1\0\1\4\17\0\15\4\1\170\2\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\1\4\1\171\16\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\2\4\1\172\15\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\11\4\1\0\1\4\17\0\12\4"+
    "\1\170\5\4\1\0\3\4\2\0\15\4\1\0\7\4"+
    "\3\0\11\4\1\0\1\4\17\0\1\173\17\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\1\4\1\174"+
    "\13\4\1\0\7\4\3\0\3\4\1\175\5\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\17\4\1\176"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\16\4\1\177\1\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\17\4\1\200\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\1\201\17\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\3\4\1\202\14\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\20\4\1\0\3\4\2\0\10\4\1\203\4\4"+
    "\1\0\7\4\3\0\11\4\1\0\1\4\17\0\20\4"+
    "\1\0\3\4\2\0\6\4\1\203\6\4\1\0\7\4"+
    "\3\0\4\4\1\204\4\4\1\0\1\4\17\0\20\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\17\4\1\205\1\0\3\4\2\0"+
    "\12\4\1\206\2\4\1\0\7\4\3\0\10\4\1\207"+
    "\1\0\1\4\17\0\20\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\10\4\1\146\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\3\4\1\210\5\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\6\4\1\211\11\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\4\4\1\212\4\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\7\4\1\213"+
    "\10\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\2\4\1\214\6\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\13\4\1\215\4\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\1\4\1\216\13\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\1\4\1\217\13\4\1\0\7\4\3\0"+
    "\3\4\1\220\5\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\16\4\1\221\1\4\1\0\3\4\2\0"+
    "\11\4\1\222\3\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\1\4\1\223\16\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\2\4\1\224\15\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\3\4\1\225\5\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\1\4\1\226\13\4\1\0\7\4\3\0\3\4\1\227"+
    "\5\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\1\4\1\230\16\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\2\4\1\230"+
    "\15\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\2\4\1\231\15\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\3\4\1\232"+
    "\5\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\1\4\1\233\7\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\4\4\1\234\10\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\7\4\1\235\10\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\2\4\1\236"+
    "\6\4\1\0\1\4\17\0\20\4\1\0\3\4\2\0"+
    "\15\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\6\4\1\237\11\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\4\4\1\237\4\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\14\4\1\240\3\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\11\4\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\3\4\1\241"+
    "\11\4\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\13\4\1\242\4\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\10\4\1\242\1\0\1\4\17\0\20\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\1\4\1\231\16\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\20\4\1\0\3\4\2\0\1\4\1\243\13\4"+
    "\1\0\7\4\3\0\11\4\1\0\1\4\17\0\14\4"+
    "\1\244\3\4\1\0\3\4\2\0\15\4\1\0\7\4"+
    "\3\0\1\4\1\244\7\4\1\0\1\4\17\0\20\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\20\4\1\0\3\4\2\0\14\4"+
    "\1\245\1\0\7\4\3\0\11\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\13\4\1\246\1\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\14\4\1\247\1\0\7\4\3\0\4\4"+
    "\1\250\4\4\1\0\1\4\17\0\20\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\10\4\1\251\1\0"+
    "\1\4\17\0\20\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\1\4\1\252\7\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\15\4\1\0\7\4\3\0"+
    "\11\4\1\0\1\4\17\0\13\4\1\253\4\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\3\0\10\4\1\254"+
    "\1\0\1\4\17\0\20\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\11\4\1\0\1\4\17\0\13\4"+
    "\1\251\4\4\1\0\3\4\2\0\15\4\1\0\7\4"+
    "\3\0\11\4\1\0\1\4\17\0\14\4\1\252\3\4"+
    "\1\0\3\4\2\0\15\4\1\0\7\4\3\0\11\4"+
    "\1\0\1\4\17\0\6\4\1\250\11\4\1\0\3\4"+
    "\2\0\15\4\1\0\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\20\4\1\0\1\255\2\4\2\0\15\4\1\256"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\20\4\1\0"+
    "\1\257\2\4\2\0\15\4\1\260\7\4\3\0\6\4"+
    "\1\255\2\4\1\0\1\4\17\0\20\4\1\0\3\4"+
    "\2\0\15\4\1\261\7\4\3\0\11\4\1\0\1\4"+
    "\17\0\6\4\1\262\11\4\1\0\3\4\2\0\15\4"+
    "\1\0\7\4\3\0\4\4\1\263\4\4\1\0\1\4"+
    "\17\0\20\4\1\0\3\4\2\0\15\4\1\0\7\4"+
    "\3\0\10\4\1\264\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\15\4\1\0\7\4\11\0\1\265\44\0"+
    "\1\265\34\0\11\4\1\0\1\4\17\0\13\4\1\264"+
    "\4\4\1\0\3\4\2\0\15\4\1\0\7\4\56\0"+
    "\1\266\42\0\1\265\101\0\11\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\3\4\1\267\11\4\1\0"+
    "\7\4\3\0\11\4\1\0\1\4\17\0\20\4\1\0"+
    "\3\4\2\0\4\4\1\270\10\4\1\0\7\4\13\0"+
    "\1\271\144\0\1\271\42\0\11\4\1\0\1\4\17\0"+
    "\14\4\1\272\3\4\1\0\3\4\2\0\15\4\1\0"+
    "\7\4\3\0\1\4\1\272\7\4\1\0\1\4\17\0"+
    "\20\4\1\0\3\4\2\0\15\4\1\0\7\4\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\10\1\1\11\1\0\1\1\6\11\1\0\3\1"+
    "\1\11\14\1\1\0\1\1\2\0\13\1\2\11\1\0"+
    "\12\1\5\11\14\1\1\11\3\1\2\11\127\1\1\0"+
    "\1\1\2\0\3\1\2\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
        private Symbol createToken(int id) {
                return new Symbol(id, yyline, yycolumn);
        }
        private Symbol createToken(int id, Object o) {
                return new Symbol(id, yyline, yycolumn, o);
        }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return createToken(STRING_LITERAL, yytext().substring(1,yytext().length()-1)) ;
          }
        case 45: break;
        case 12: 
          { return createToken(LESS               );
          }
        case 46: break;
        case 42: 
          { return createToken(STRUCT             );
          }
        case 47: break;
        case 27: 
          { return createToken(FORALL             );
          }
        case 48: break;
        case 43: 
          { return createToken(GROUP_AS           );
          }
        case 49: break;
        case 28: 
          { return createToken(FORANY             );
          }
        case 50: break;
        case 20: 
          { return createToken(MORE_OR_EQUAL      );
          }
        case 51: break;
        case 14: 
          { return createToken(LEFT_ROUND_BRACKET   );
          }
        case 52: break;
        case 10: 
          { return createToken(NOT                );
          }
        case 53: break;
        case 41: 
          { return createToken(EXISTS             );
          }
        case 54: break;
        case 30: 
          { return createToken(SUM                );
          }
        case 55: break;
        case 37: 
          { return createToken(WHERE              );
          }
        case 56: break;
        case 2: 
          { return createToken(IDENTIFIER, yytext());
          }
        case 57: break;
        case 23: 
          { return createToken(OR                 );
          }
        case 58: break;
        case 21: 
          { return createToken(LESS_OR_EQUAL      );
          }
        case 59: break;
        case 7: 
          { return createToken(MULTIPLY                   );
          }
        case 60: break;
        case 9: 
          { return createToken(MODULO             );
          }
        case 61: break;
        case 31: 
          { return createToken(MAX                );
          }
        case 62: break;
        case 22: 
          { return createToken(IN                 );
          }
        case 63: break;
        case 25: 
          { return createToken(XOR                );
          }
        case 64: break;
        case 40: 
          { return createToken(UNIQUE             );
          }
        case 65: break;
        case 16: 
          { return createToken(AS                 );
          }
        case 66: break;
        case 6: 
          { return createToken(MINUS                              );
          }
        case 67: break;
        case 33: 
          { return createToken(BAG                );
          }
        case 68: break;
        case 38: 
          { return createToken(MINUS_FUNCTION     );
          }
        case 69: break;
        case 15: 
          { return createToken(RIGHT_ROUND_BRACKET  );
          }
        case 70: break;
        case 36: 
          { return createToken(UNION              );
          }
        case 71: break;
        case 8: 
          { return createToken(DIVIDE                             );
          }
        case 72: break;
        case 3: 
          { return createToken(DOT                );
          }
        case 73: break;
        case 5: 
          { return createToken(PLUS                               );
          }
        case 74: break;
        case 11: 
          { return createToken(MORE               );
          }
        case 75: break;
        case 1: 
          { int val;
                try {
                        val = Integer.parseInt(yytext());
                }
                catch (Exception e) {
                        throw new RuntimeException(e.getMessage());
                }
                return createToken(INTEGER_LITERAL, new Integer(val));
          }
        case 76: break;
        case 18: 
          { return createToken(EQUALS             );
          }
        case 77: break;
        case 29: 
          { return createToken(AVG                );
          }
        case 78: break;
        case 44: 
          { return createToken(INTERSECT          );
          }
        case 79: break;
        case 35: 
          { return createToken(JOIN               );
          }
        case 80: break;
        case 26: 
          { double val;
                try {
                        val = Double.parseDouble(yytext());
                }
                catch (Exception e) {
                        throw new RuntimeException(e.getMessage());
                }
                return createToken(DOUBLE_LITERAL, new Double(val));
          }
        case 81: break;
        case 13: 
          { return createToken(COMMA              );
          }
        case 82: break;
        case 19: 
          { return createToken(NOT_EQUALS         );
          }
        case 83: break;
        case 39: 
          { return createToken(COUNT              );
          }
        case 84: break;
        case 32: 
          { return createToken(MIN                );
          }
        case 85: break;
        case 34: 
          { boolean val;
                try {
                        val = Boolean.parseBoolean(yytext());
                }
                catch (Exception e) {
                        throw new RuntimeException(e.getMessage());
                }
                return createToken(BOOLEAN_LITERAL, new Boolean(val));
          }
        case 86: break;
        case 24: 
          { return createToken(AND                );
          }
        case 87: break;
        case 4: 
          { 
          }
        case 88: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {         return createToken(EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
